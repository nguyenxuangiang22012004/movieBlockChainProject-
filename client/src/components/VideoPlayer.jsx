import React, { useEffect, useRef } from "react";

const IPFS_GATEWAY = "http://127.0.0.1:8080/ipfs";

function VideoPlayer({
  currentMovie,
  isLoadingMovie,
  selectedSeason,
  selectedEpisode,
  selectedQuality,
  videoKey,
  onPlayerReady,
}) {
  const containerRef = useRef(null);
  const playerRef = useRef(null);
  const playerInstance = useRef(null);

  // ‚úÖ L·∫•y ngu·ªìn video ph√π h·ª£p cho Movie ho·∫∑c TVSeries
  const getVideoSource = () => {
    if (!currentMovie) return null;

    // --- N·∫øu l√† phim l·∫ª ---
    if (currentMovie.category?.toLowerCase() === "movie") {
      let sources = {};

      // ‚úÖ T·ª± ƒë·ªông nh·∫≠n d·∫°ng c·∫•u tr√∫c video_source
      if (currentMovie.video_source) {
        if (currentMovie.video_source.sources) {
          sources = currentMovie.video_source.sources;
        } else if (typeof currentMovie.video_source === "object") {
          // { "480p": "CID1", "720p": "CID2" }
          sources = currentMovie.video_source;
        } else if (typeof currentMovie.video_source === "string") {
          // "Qm123..." (ch·ªâ 1 CID)
          sources = { default: currentMovie.video_source };
        }
      }

      // ‚úÖ N·∫øu c√≥ nhi·ªÅu ƒë·ªô ph√¢n gi·∫£i ‚Üí Plyr s·∫Ω t·ª± t·∫°o dropdown Quality
      if (Object.keys(sources).length > 0) {
        return {
          type: "ipfs",
          sources,
        };
      }

      return null;
    }

    // --- N·∫øu l√† phim b·ªô ---
    if (
      currentMovie.category?.toLowerCase() === "tvseries" &&
      currentMovie.seasons?.[selectedSeason]?.episodes?.[selectedEpisode]
    ) {
      return currentMovie.seasons[selectedSeason].episodes[selectedEpisode].video_source;
    }

    return null;
  };

  // ‚úÖ Cleanup Plyr khi component unmount
  useEffect(() => {
    return () => {
      if (playerInstance.current) {
        try {
          playerInstance.current.destroy();
          console.log("üßπ Destroyed Plyr instance");
        } catch (e) {
          console.warn("‚ö†Ô∏è Error destroying Plyr:", e);
        }
        playerInstance.current = null;
      }
    };
  }, []);

  // ‚úÖ Kh·ªüi t·∫°o Plyr l·∫°i m·ªói khi videoKey ƒë·ªïi
  useEffect(() => {
    const videoEl = playerRef.current;
    const PlyrLib = window.Plyr;
    const videoSource = getVideoSource();

    if (!PlyrLib || !videoEl || !videoSource?.sources) return;

    // H·ªßy player c≈©
    if (playerInstance.current) {
      try {
        playerInstance.current.destroy();
        playerInstance.current = null;
      } catch (err) {
        console.warn("‚ö†Ô∏è Destroy error:", err);
      }
    }

    // Chu·∫©n b·ªã danh s√°ch ngu·ªìn
    const sources = Object.entries(videoSource.sources)
      .map(([quality, cid]) => ({
        src: `${IPFS_GATEWAY}/${cid}`,
        type: "video/mp4",
        size: parseInt(quality.replace("p", "")) || 720, // fallback 720p
      }))
      .sort((a, b) => b.size - a.size);

    // X√≥a src c≈© ƒë·ªÉ React kh√¥ng ‚ÄúremoveChild‚Äù nh·∫ßm node
    videoEl.removeAttribute("src");
    videoEl.load();

    // ‚úÖ T·∫°o Plyr instance m·ªõi
    const player = new PlyrLib(videoEl, {
      controls: [
        "play-large",
        "play",
        "progress",
        "current-time",
        "duration",
        "mute",
        "volume",
        "settings",
        "pip",
        "airplay",
        "fullscreen",
      ],
      settings: ["quality", "speed", "loop"],
      fullscreen: {
        enabled: true,
        fallback: true,
        iosNative: true,
      },
      quality: {
        default: parseInt(selectedQuality?.replace("p", "")) || sources[0]?.size,
        options: sources.map((s) => s.size),
        forced: true,
        onChange: (q) => onPlayerReady?.(q),
      },
    });

    player.source = { type: "video", sources };
    playerInstance.current = player;

    console.log("üé¨ Plyr initialized:", currentMovie.title);

    // Cleanup ri√™ng cho m·ªói l·∫ßn ƒë·ªïi videoKey
    return () => {
      if (playerInstance.current) {
        try {
          playerInstance.current.destroy();
          console.log("‚ôªÔ∏è Destroyed Plyr before remount");
        } catch (e) {
          console.warn("‚ö†Ô∏è Cleanup Plyr failed:", e);
        } finally {
          playerInstance.current = null;
        }
      }
    };
  }, [videoKey, selectedSeason, selectedEpisode, selectedQuality, currentMovie]);

  if (isLoadingMovie) {
    return (
      <div className="section__player">
        <div className="error-message">Loading video...</div>
      </div>
    );
  }

  return (
    // üëá G·∫Øn key tr·ª±c ti·∫øp v√†o container, bu·ªôc React remount ho√†n to√†n m·ªói video m·ªõi
    <div key={`video-container-${videoKey}`} ref={containerRef} className="section__player">
      <video
        ref={playerRef}
        playsInline
        controls
        crossOrigin="anonymous"
        poster={currentMovie.cover_image_url}
        className="plyr-video"
      />
    </div>
  );
}

export default VideoPlayer;
