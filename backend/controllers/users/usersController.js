import { getAllUsersService ,createUserService , updateUserService  } from "../../services/users/userService.js";
import bcrypt from "bcryptjs";
import User from "../../models/user.model.js";

export const getAllUsers = async (req, res) => {
  try {
    const filters = req.query;
    const result = await getAllUsersService(filters);

    return res.status(200).json({
      success: true,
      ...result,
    });
  } catch (err) {
    console.error("‚ùå Error in getAllUsers:", err);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng",
      error: err.message,
    });
  }
};

export const createUser = async (req, res) => {
  try {
    const { email, username, password } = req.body;

    // üîç Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!email || !username || !password) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu email, username ho·∫∑c password",
      });
    }

    // üßÇ M√£ ho√° m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);

    // üöÄ G·ªçi service t·∫°o user
    const newUser = await createUserService({
      email,
      username,
      password: hashedPassword,
    });

    return res.status(201).json({
      success: true,
      message: "T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng",
      data: newUser,
    });
  } catch (err) {
    console.error("‚ùå Error in createUser:", err);

    // ‚ö†Ô∏è N·∫øu tr√πng email ho·∫∑c username
    if (err.code === 11000) {
      const field = Object.keys(err.keyValue)[0];
      return res.status(400).json({
        success: false,
        message: `Gi√° tr·ªã ${field} "${err.keyValue[field]}" ƒë√£ t·ªìn t·∫°i`,
      });
    }

    return res.status(500).json({
      success: false,
      message: "L·ªói server khi t·∫°o ng∆∞·ªùi d√πng",
      error: err.message,
    });
  }
};

export const updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;

    const result = await updateUserService(id, updateData);

    if (!result) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
      });
    }

    return res.status(200).json({
      success: true,
      message: "C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng",
      data: result,
    });
  } catch (err) {
    console.error("‚ùå Error in updateUser:", err);
    return res.status(500).json({
      success: false,
      message: "L·ªói server khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng",
      error: err.message,
    });
  }
};

export const getUserById = async (req, res) => {
  try {
    const { id } = req.params;
    const user = await User.findById(id).select("-password"); // lo·∫°i b·ªè password khi tr·∫£ v·ªÅ

    if (!user) {
      return res.status(404).json({ success: false, message: "User not found" });
    }

    res.json({ success: true, data: user });
  } catch (error) {
    console.error("Error fetching user:", error);
    res.status(500).json({ success: false, message: "Server error" });
  }
};